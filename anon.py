import telebot
import os
import json
from icecream import ic

########### –§—É–Ω–∫—Ü–∏–∏ ##############
from func import *

########### –†–∞–±–æ—Ç–∞ —Å –ë–î ##########
from db import *
raw_db = read_db()

###### –ö–ª–∞—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ########
from user import *
# user.id = 123
# user.pkey = "fd35s"
# user.channel = "anotheruser"
# user.avatar = "‚ôøÔ∏è"
# user.blocks = [124235]
# user.keys = {"anotheruser": "re543"}

####### –†–∞–±–æ—Ç–∞ —Å —Ö—ç—à–µ–º ###########
from hash import hash
from random import randint

##### –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ #######
bot = telebot.TeleBot(raw_db['token'])

########## –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ ##########
from catch_err import *


############## MAIN ##############

@bot.message_handler(commands=['start', 'help'])
def start(message):
	bot.reply_to(message, f"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, —ç—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è.
–ì–ª–∞–≤–Ω–æ–µ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ—é —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã, –±–µ–∑ –ø–ª–∞—Ç—ã –∏  –±–µ–∑ —Å–ª–µ–∂–∫–∏.

–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è:
/reg –õ—é–±–æ–π–ù–∏–∫–Ω–µ–π–º
–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞—Ç–∞ - { telebot.formatting.hcode(":–ù–∏–∫–ê–¥—Ä–µ—Å–∞—Ç–∞") }

–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: https://gitea.404.mn/justuser/just_anonchat
–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º: { telebot.formatting.hcode(":justuser") }

–ï—â—ë –ø—Ä–æ–µ–∫—Ç—ã: @just_openbots""", parse_mode="HTML")

@bot.message_handler(commands=['reg'])
def reg(message):
	try:
		db = load()
		if len(message.text.split()) == 2:
			nick = message.text.split()[1]
			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–∞
			if not nick_ok(bot, message, nick):
				return 0
			if nick in db:
				bot.reply_to(message, "–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
			elif str(message.chat.id) in db:
				bot.reply_to(message, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
			else:
				user = user_(message.chat.id, hash(randint(74287, 5747962)))
				db[nick] = user
				db[message.chat.id] = nick

				save(db)
				bot.reply_to(message, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.")
		else:
			bot.reply_to(message, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞, –Ω—É–∂–Ω–æ: /reg –õ—é–±–æ–π–ù–∏–∫–Ω–µ–π–º")
	except:
		catch_error(bot, message)

@bot.message_handler(commands=['b'])
def b(message):
	try:
		if is_auth(bot, message):
			db = load()
			nick = db[str(message.chat.id)]
			user = db[nick]
			block = message.text.split()[1]

			# Block by ":user"
			if block[0] == ":":
				block = block[1:]

			if block in db:
				if db[block].id not in user.blocks:
					user.blocks.append(db[block].id)
					save(db)
				bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telebot.formatting.hcode(block)} –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",parse_mode="HTML")
			else:
				bot.reply_to(message, "–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
	except:
		catch_error(bot, message)

@bot.message_handler(commands=['u'])
def u(message):
	try:
		if is_auth(bot, message):
			db = load()
			nick = db[str(message.chat.id)]
			user = db[nick]
			block = message.text.split()[1]

			# Unblock by ":user"
			if block[0] == ":":
				block = block[1:]

			if db[block].id in user.blocks:
				user.blocks.remove(db[block].id)
				save(db)
			bot.reply_to(message, f"–ë—ã–ª–∞ —Å–Ω—è—Ç–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telebot.formatting.hcode(block)}",parse_mode="HTML")
	except:
		catch_error(bot, message)

@bot.message_handler(commands=['nick'])
def nick(message):
	try:
		if is_auth(bot, message):
			db = load()
			new_nick = message.text.split()[1]
			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏–∫–∞
			if not nick_ok(message, new_nick):
				return 0
			old_nick = db[str(message.chat.id)]

			if new_nick not in db:
				db[new_nick] = db[old_nick]
				db[new_nick].avatar = "‚ôøÔ∏è"
				db[str(message.chat.id)] = new_nick
				del db[old_nick]
				save(db)
				bot.reply_to(message,f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ —Å {telebot.formatting.hcode(old_nick)} –Ω–∞ {telebot.formatting.hcode(new_nick)}",parse_mode="HTML")
				bot.reply_to(message, """–í–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π: ‚ôøÔ∏è
–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: /key_res""")
			else:
				bot.reply_to(message,"–î–∞–Ω–Ω—ã–π –Ω–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç")
	except:
		catch_error(bot, message)

@bot.message_handler(commands=['av'])
def av(message):
	try:
		if is_auth(bot, message):
			db = load()
			if not len(message.text.split()) > 1:
				bot.reply_to(message,"–£–∫–∞–∂–∏—Ç–µ –∞–≤–∞—Ç–∞—Ä–∫—É")
				return 0
			new_avatar = message.text.split()[1]
			if len(new_avatar) > 10:
				bot.reply_to(message,"–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∫–∏")
			else:
				nick = db[str(message.chat.id)]
				db[nick].avatar = new_avatar
				save(db)
				bot.reply_to(message,"–ù–æ–≤–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
	except:
		catch_error(bot, message)

######### –†–∞–±–æ—Ç–∞ —Å –∫–ª—é—á–æ–º ########

@bot.message_handler(commands=['key'])
def key(message):
	try:
		if len(message.text.split()) == 2:
			db = load()
			nick = message.text.split()[1]
			if nick[0] == ':':
				nick = nick[1:]
			key = db[nick].pkey
			bot.reply_to(message,f"–ö–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {telebot.formatting.hcode(key)}", parse_mode="HTML")
		else:
			bot.reply_to(message,"/key –Ω–∏–∫")
	except:
		catch_error(bot, message)

@bot.message_handler(commands=['ver'])
def ver(message):
	try:
		if len(message.text.split()) == 3:
			db = load()
			nick = message.text.split()[1]
			if nick[0] == ':':
				nick = nick[1:]
			key = message.text.split()[2]
			if not nick in db:
				bot.reply_to(message,"–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
				return 0

			if key == db[nick].pkey:
				bot.reply_to(message,"‚úÖ –ö–ª—é—á–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
			else:
				bot.reply_to(message,"‚ùå –ö–ª—é—á–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
		else:
			bot.reply_to(message,"/ver –Ω–∏–∫ –∫–ª—é—á")
	except:
		catch_error(bot, message)

@bot.message_handler(commands=['key_res'])
def key_res(message):
	try:
		if is_auth(bot, message):
			db = load()

			key = hash(randint(74287, 5747962))
			nick = db[str(message.chat.id)]
			old_key = db[nick].pkey

			db[nick].pkey = key
			save(db)

			bot.reply_to(message,f"""üîë –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω.

–°—Ç–∞—Ä—ã–π –∫–ª—é—á: {telebot.formatting.hcode(old_key)}
–ù–æ–≤—ã–π –∫–ª—é—á: {telebot.formatting.hcode(key)}""",parse_mode="HTML")
	except:
		catch_error(bot, message)


##################################

@bot.message_handler(commands=['me'])
def me(message):
	try:
		if is_auth(bot, message):
			db = load()
			nick = db[str(message.chat.id)]
			user = db[nick]
			ch = user.channel
			if not user.channel:
				ch = "–ù–µ –∑–∞–¥–∞–Ω."

			bot.reply_to(message, f"""–ó–∞–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: {telebot.formatting.hcode(ch)}

–í–∞—à –Ω–∏–∫: {telebot.formatting.hcode(nick)}
–í–∞—à–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞: {telebot.formatting.hcode(user.avatar)}
–í–∞—à –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {telebot.formatting.hcode(user.pkey)}""",parse_mode="HTML")
	except:
		catch_error(bot, message)


###### –ü–µ—Ä–µ–¥–∞—á–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ########

@bot.message_handler(func=lambda message: True, content_types=['photo','text', 'document', 'voice', 'video'])
def catch_all_messages(message):
	try:
		db = load()
		nick = db[str(message.chat.id)]
		user = db[nick]
		avatar = ' ' + user.avatar
		if message.content_type == "text" and message.text[:1].lower() == ":":
			channel = message.text[1:]
			if channel in db:
				# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
				if not key_valid(bot, message, channel):
					return 0

				user.channel = channel
				bot.reply_to(message, "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥—Ä–µ—Å–∞—Ç: " + telebot.formatting.hcode(channel), parse_mode="HTML")
				save(db)
			else:
				bot.reply_to(message, "–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
		elif user.channel != None:
			channel = user.channel
			# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏
			if not key_valid(bot, message, channel):
				return 0
			db = load()

			if message.chat.id not in db[channel].blocks:
				try:
					# Check if image
					if "photo" in message.json:
						img_id = message.json['photo'][0]['file_id']
						# Catch caption
						if "caption" in message.json:
							caption = "\n" + message.json['caption']
						else:
							caption = ""

						bot.send_photo(db[channel].id, img_id, f"{telebot.formatting.hcode(':'+nick) + avatar}" + caption, parse_mode="HTML")

					elif "document" in message.json:
						doc_id = message.json['document']['file_id']
						if "caption" in message.json:
							caption = "\n" + message.json['caption']
						else:
							caption = ""
						bot.send_document(db[channel].id, doc_id, caption = f"{telebot.formatting.hcode(':'+nick) + avatar}" + caption, parse_mode="HTML")
					elif "voice" in message.json:
						voice_id = message.json['voice']['file_id']
						bot.send_document(db[channel].id, voice_id, caption = f"{telebot.formatting.hcode(':'+nick) + avatar}", parse_mode="HTML")
					elif "video" in message.json:
						vid_id = message.json['video']['file_id']
						if "caption" in message.json:
							caption = "\n" + message.json['caption']
						else:
							caption = ""
						bot.send_video(db[channel].id, vid_id, caption = f"{telebot.formatting.hcode(':'+nick) + avatar}", parse_mode="HTML")
					else:
						bot.send_message(db[channel].id, f"{telebot.formatting.hcode(':'+nick) + avatar}\n" + message.text, parse_mode="HTML")

				except:
					catch_error(bot, message)
					bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.\n–í–µ—Ä–æ—è—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
			else:
				bot.reply_to(message, "–£–≤—ã, –Ω–æ –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.")
		else:
			bot.reply_to(message, f"–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω —á–∞—Ç.\n–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —á–∞—Ç—É –Ω–∞–ø–∏—à–∏—Ç–µ: {telebot.formatting.hcode(':–ù–∏–∫–Ω–µ–π–º')} ", parse_mode="HTML")
	except:
		catch_error(bot, message)

#### POLLING ####
from sys import argv
if len(argv) > 1:
	mode = "debug"
else:
	mode = "normal"

if mode == "normal":
	while True:
		try:
			bot.polling()
		except KeyboardInterrupt:
			exit()
		except:
			pass
elif mode == "debug":
	ic("Started debug...")
	bot.polling()
